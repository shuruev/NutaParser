<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnumDeclaration1" xml:space="preserve">
    <value>enum Color
{
   Red,
   Green,
   Blue
}</value>
  </data>
  <data name="EnumDeclaration2" xml:space="preserve">
    <value>enum Color: long
{
   Red,
   Green,
   Blue
}</value>
  </data>
  <data name="EnumDeclaration3" xml:space="preserve">
    <value>enum Color: uint
{
   Red = -1,
   Green = -2,
   Blue = -3
}</value>
  </data>
  <data name="EnumDeclaration4" xml:space="preserve">
    <value>enum Color 
{
   Red,
   Green,
   Blue,

   Max = Blue
}</value>
  </data>
  <data name="InterfaceDeclaration1" xml:space="preserve">
    <value>interface C&lt;out X, in Y, Z&gt; 
{
  X M(Y y);
  Z P { get; set; }
}</value>
  </data>
  <data name="InterfaceDeclaration2" xml:space="preserve">
    <value>interface IControl
{
   void Paint();
}</value>
  </data>
  <data name="InterfaceDeclaration3" xml:space="preserve">
    <value>interface IListBox: IControl
{
   void SetItems(string[] items);
}</value>
  </data>
  <data name="InterfaceDeclaration4" xml:space="preserve">
    <value>interface IComboBox: ITextBox, IListBox { }</value>
  </data>
  <data name="InterfaceDeclaration5" xml:space="preserve">
    <value>public interface IStringList
{
   void Add(string s);
   int Count { get; }
   event StringListEvent Changed;
   string this[int index] { get; set; }
}</value>
  </data>
  <data name="InterfaceDeclaration6" xml:space="preserve">
    <value>interface I&lt;out T&gt; { void M&lt;U&gt;() where U : T; }</value>
  </data>
  <data name="InterfaceDeclaration7" xml:space="preserve">
    <value>interface IList&lt;T&gt;
{
   T[] GetElements();
}</value>
  </data>
  <data name="InterfaceDeclaration8" xml:space="preserve">
    <value>interface IDictionary&lt;K,V&gt;
{
   V this[K key] { get; }
   void Add(K key, V value);
}</value>
  </data>
  <data name="InterfaceDeclaration9" xml:space="preserve">
    <value>interface I&lt;A,B,C&gt;
{
   void F&lt;T&gt;(T t) where T: A;
   void G&lt;T&gt;(T t) where T: B;
   void H&lt;T&gt;(T t) where T: C;
}</value>
  </data>
  <data name="QueryExpression1" xml:space="preserve">
    <value>from c in customers select c.Name</value>
  </data>
  <data name="QueryExpression10" xml:space="preserve">
    <value>from c in customers orderby c.LastName, c.FirstName select c.Name</value>
  </data>
  <data name="QueryExpression11" xml:space="preserve">
    <value>from c in customers orderby c.LastName descending, c.FirstName ascending select c.Name</value>
  </data>
  <data name="QueryExpression12" xml:space="preserve">
    <value>from c in customers orderby c.LastName descending, c.FirstName ascending orderby c.Address select c.Name</value>
  </data>
  <data name="QueryExpression13" xml:space="preserve">
    <value>from c in customers group c by c.Country</value>
  </data>
  <data name="QueryExpression14" xml:space="preserve">
    <value>from c in customers group c by c.Country into g select g.Key</value>
  </data>
  <data name="QueryExpression15" xml:space="preserve">
    <value>from itm in new int[] { 1, 2, 3, 4, 5 } let i = itm == 1 ? 1 : 0 select i</value>
  </data>
  <data name="QueryExpression16" xml:space="preserve">
    <value>from b in new int[] { 1, 2, 3, 4, 5 } where true &amp;&amp; (b.Equals) select b</value>
  </data>
  <data name="QueryExpression17" xml:space="preserve">
    <value>from b in new int[] { 1, 2, 3, 4, 5 } where true || (b.Equals) select b</value>
  </data>
  <data name="QueryExpression18" xml:space="preserve">
    <value>from b in new int[] { 1, 2, 3, 4, 5 } where true != (b.Equals) select b</value>
  </data>
  <data name="QueryExpression2" xml:space="preserve">
    <value>from int[] c in customers select c.Count</value>
  </data>
  <data name="QueryExpression3" xml:space="preserve">
    <value>from int[] c in customers from d in deltas select c.Count + d</value>
  </data>
  <data name="QueryExpression4" xml:space="preserve">
    <value>from c in customers let address = c.Address let area = c.PhoneNumber.AreaCode select address + area</value>
  </data>
  <data name="QueryExpression5" xml:space="preserve">
    <value>from c in customers join a in address on c.ZipCode equals a.ZipCode select c.Name</value>
  </data>
  <data name="QueryExpression6" xml:space="preserve">
    <value>from c in customers join a in address on c.ZipCode equals a.ZipCode into g select c.Name</value>
  </data>
  <data name="QueryExpression7" xml:space="preserve">
    <value>from c in customers join a in address on c.ZipCode equals a.ZipCode join n in phonenumber on c.AreaCode equals n.AreaCode into x select c.Name</value>
  </data>
  <data name="QueryExpression8" xml:space="preserve">
    <value>from c in customers orderby c.LastName select c.Name</value>
  </data>
  <data name="QueryExpression9" xml:space="preserve">
    <value>from c in customers orderby c.LastName ascending select c.Name</value>
  </data>
  <data name="SwitchStatement1" xml:space="preserve">
    <value>switch (i) {
case 0:
   CaseZero();
   break;
case 1:
   CaseOne();
   break;
default:
   CaseOthers();
   break;
}</value>
  </data>
  <data name="SwitchStatement2" xml:space="preserve">
    <value>switch (i) {
case 0:
   CaseZero();
case 1:
   CaseZeroOrOne();
default:
   CaseAny();
}</value>
  </data>
  <data name="SwitchStatement3" xml:space="preserve">
    <value>switch (i) {
case 0:
   CaseZero();
   goto case 1;
case 1:
   CaseZeroOrOne();
   goto default;
default:
   CaseAny();
   break;
}</value>
  </data>
  <data name="SwitchStatement4" xml:space="preserve">
    <value>switch (i) {
case 0:
   CaseZero();
   break;
case 1:
   CaseOne();
   break;
case 2:
default:
   CaseTwo();
   break;
}</value>
  </data>
  <data name="SwitchStatement5" xml:space="preserve">
    <value>switch (i) {
default:
   CaseAny();
   break;
case 1:
   CaseZeroOrOne();
   goto default;
case 0:
   CaseZero();
   goto case 1;
}</value>
  </data>
  <data name="SwitchStatement6" xml:space="preserve">
    <value>switch (i) {
case 0:
   while (true) F();
case 1:
   throw new ArgumentException();
case 2:
   return;
}</value>
  </data>
  <data name="SwitchStatement7" xml:space="preserve">
    <value>switch (command.ToLower()) {
   case "run":
      DoRun();
      break;
   case "save":
      DoSave();
      break;
   case "quit":
      DoQuit();
      break;
   default:
      InvalidCommand(command);
      break;
   }</value>
  </data>
</root>